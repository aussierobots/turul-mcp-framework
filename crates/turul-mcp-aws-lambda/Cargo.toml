[package]
name = "turul-mcp-aws-lambda"
version = "0.2.1"
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
description = "AWS Lambda integration for turul-mcp-framework servers"
autoexamples = false                                                   # Disable auto-discovery to prevent duplicate target warnings

[features]
default = ["cors", "sse"]
cors = []                                         # CORS header injection for Lambda responses
sse = []                                          # Server-Sent Events stream adaptation
streaming = ["sse"]                               # Enable real SSE streaming with run_with_streaming_response
dynamodb = ["turul-mcp-session-storage/dynamodb"] # DynamoDB session storage

[dependencies]
# Core MCP framework
turul-mcp-server = { workspace = true }
turul-http-mcp-server = { workspace = true }
turul-mcp-json-rpc-server = { workspace = true }
turul-mcp-protocol = { workspace = true }
turul-mcp-builders = { workspace = true }
turul-mcp-session-storage = { workspace = true }
turul-mcp-derive = { workspace = true }

# AWS Lambda runtime
lambda_http = { workspace = true }
lambda_runtime = { workspace = true }

# HTTP and body handling
hyper = { workspace = true }
hyper-util = { workspace = true }
http = { workspace = true }
http-body-util = { workspace = true }
http-body = { workspace = true }
bytes = { workspace = true }

# Async and futures
tokio = { workspace = true }
futures = { workspace = true }
async-stream = { workspace = true }

# Serialization
serde = { workspace = true }
serde_json = { workspace = true }

# Utilities
uuid = { workspace = true, features = ["v7"] }
async-trait = { workspace = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
thiserror = { workspace = true }
chrono = { workspace = true, features = ["serde"] }

[dev-dependencies]
tokio = { workspace = true, features = ["test-util"] }
tokio-test = { workspace = true }
tracing-subscriber = { workspace = true }
aws_lambda_events = { workspace = true }
serial_test = { workspace = true }

# Binary target required for `cargo lambda watch` to work properly
# Must be [[bin]] not [[example]] for lambda tooling compatibility
[[bin]]
name = "lambda-echo-server"
path = "examples/lambda-echo-server.rs"

# Note: autoexamples = false in [package] prevents duplicate target warnings

[lib]
name = "turul_mcp_aws_lambda"
path = "src/lib.rs"
