//! Implementation of #[derive(McpResource)] macro

use proc_macro2::TokenStream;
use quote::quote;
use syn::{Data, DeriveInput, Result};

use crate::utils::extract_resource_meta;

pub fn derive_mcp_resource_impl(input: DeriveInput) -> Result<TokenStream> {
    let struct_name = &input.ident;
    let _vis = &input.vis;

    // Extract struct-level attributes from #[resource(...)]
    let resource_meta = extract_resource_meta(&input.attrs)?;
    let uri = &resource_meta.uri;
    let name = &resource_meta.name;
    let description = &resource_meta.description;

    // Check if it's a struct
    let _data = match &input.data {
        Data::Struct(data) => data,
        _ => {
            return Err(syn::Error::new_spanned(
                &input,
                "McpResource can only be derived for structs",
            ));
        }
    };

    // Note: read() method implementation is now handled by manual McpResource trait impl

    let expanded = quote! {
        #[automatically_derived]
        impl turul_mcp_protocol::resources::HasResourceMetadata for #struct_name {
            fn name(&self) -> &str {
                #name
            }

            fn title(&self) -> Option<&str> {
                None  // TODO: Support title from attributes
            }
        }

        #[automatically_derived]
        impl turul_mcp_protocol::resources::HasResourceDescription for #struct_name {
            fn description(&self) -> Option<&str> {
                Some(#description)
            }
        }

        #[automatically_derived]
        impl turul_mcp_protocol::resources::HasResourceUri for #struct_name {
            fn uri(&self) -> &str {
                #uri
            }
        }

        #[automatically_derived]
        impl turul_mcp_protocol::resources::HasResourceMimeType for #struct_name {
            fn mime_type(&self) -> Option<&str> {
                None  // TODO: Support mime_type from attributes
            }
        }

        #[automatically_derived]
        impl turul_mcp_protocol::resources::HasResourceSize for #struct_name {
            fn size(&self) -> Option<u64> {
                None
            }
        }

        #[automatically_derived]
        impl turul_mcp_protocol::resources::HasResourceAnnotations for #struct_name {
            fn annotations(&self) -> Option<&turul_mcp_protocol::meta::Annotations> {
                None
            }
        }

        #[automatically_derived]
        impl turul_mcp_protocol::resources::HasResourceMeta for #struct_name {
            fn resource_meta(&self) -> Option<&std::collections::HashMap<String, serde_json::Value>> {
                None
            }
        }

        // ResourceDefinition automatically implemented via blanket impl in resources.rs
        // No need for explicit impl - blanket impl handles it

        // Note: McpResource trait implementation is NOT generated by this macro
        // Users must implement the McpResource trait manually to provide custom read() logic
    };

    Ok(expanded)
}

// Note: generate_read_method function removed as McpResource trait implementation
// is now handled manually by users. The derive macro only generates metadata traits.

#[cfg(test)]
mod tests {
    use super::*;
    use syn::parse_quote;

    #[test]
    fn test_simple_resource() {
        let input: DeriveInput = parse_quote! {
            #[resource(
                uri = "file://test.txt",
                name = "Test File",
                description = "A test file resource"
            )]
            struct TestResource {
                #[content]
                data: String,
            }
        };

        let result = derive_mcp_resource_impl(input);
        assert!(result.is_ok());

        // The generated code should contain metadata trait implementations
        let generated = result.unwrap().to_string();
        assert!(generated.contains("HasResourceMetadata"));
        assert!(generated.contains("HasResourceUri"));
        assert!(generated.contains("HasResourceDescription"));
        // Should NOT contain McpResource trait implementation
        assert!(!generated.contains("impl turul_mcp_server::McpResource"));
    }

    #[test]
    fn test_missing_attributes() {
        let input: DeriveInput = parse_quote! {
            struct TestResource {
                data: String,
            }
        };

        let result = derive_mcp_resource_impl(input);
        assert!(result.is_err());
    }

    #[test]
    fn test_unit_struct() {
        let input: DeriveInput = parse_quote! {
            #[resource(
                uri = "system://status",
                name = "System Status",
                description = "Current system status"
            )]
            struct SystemStatus;
        };

        let result = derive_mcp_resource_impl(input);
        assert!(result.is_ok());
    }

    #[test]
    fn test_tuple_struct() {
        let input: DeriveInput = parse_quote! {
            #[resource(
                uri = "data://message",
                name = "Message",
                description = "A simple message"
            )]
            struct Message(String);
        };

        let result = derive_mcp_resource_impl(input);
        assert!(result.is_ok());
    }
}
